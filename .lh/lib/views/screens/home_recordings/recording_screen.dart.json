{
    "sourceFile": "lib/views/screens/home_recordings/recording_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759835983873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759835983873,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'dart:io';\n\nimport 'package:cached_video_player_plus/cached_video_player_plus.dart';\nimport 'package:camera/camera.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\nimport 'package:get/get.dart';\nimport 'package:native_device_orientation/native_device_orientation.dart';\nimport 'package:socials_app/services/custom_snackbar.dart';\nimport 'package:socials_app/services/session_services.dart';\nimport 'package:socials_app/utils/app_colors.dart';\nimport 'package:socials_app/utils/app_images.dart';\nimport 'package:socials_app/utils/app_strings.dart';\nimport 'package:socials_app/utils/common_code.dart';\nimport 'package:socials_app/views/screens/home_recordings/components/videosharingbottom.dart';\nimport 'package:video_trimmer/video_trimmer.dart';\n\nimport '../../../services/permission_service.dart';\nimport '../../../utils/app_styles.dart';\nimport '../bottom/controller/bottom_bar_controller.dart';\nimport 'components/combining_video_loading_widget.dart';\nimport 'components/countdown_widget.dart';\nimport 'controller/recording_cont.dart';\n\nclass RecordingScreen extends GetView<RecordingController> {\n  final bool isFromBottomBar;\n  const RecordingScreen({super.key, required this.isFromBottomBar});\n\n  @override\n  Widget build(BuildContext context) {\n    if (!isFromBottomBar) {\n      Future.microtask(() {\n        controller.firstInit(isFromBottomBar: isFromBottomBar);\n      });\n    }\n    return isFromBottomBar\n        ? WillPopScope(\n            onWillPop: () {\n              print('============on will pop called');\n              controller.resetRecording();\n              Get.find<BottomBarController>().selectedIndex.value = 0;\n              return Future.value(false);\n            },\n            child: Scaffold(\n              body: NativeDeviceOrientationReader(\n                builder: (context) {\n                  final orientation = NativeDeviceOrientationReader.orientation(context);\n                  return allViewBuild();\n                },\n              ),\n            ),\n          )\n        : Scaffold(\n            body: NativeDeviceOrientationReader(\n              builder: (context) {\n                final orientation = NativeDeviceOrientationReader.orientation(context);\n                if (!controller.isRecordingStarted.value) {\n                  if (orientation == NativeDeviceOrientation.landscapeLeft) {\n                    controller.rotateValue.value = 1;\n                  } else if (orientation == NativeDeviceOrientation.landscapeRight) {\n                    controller.rotateValue.value = -1;\n                  } else {\n                    controller.rotateValue.value = 0;\n                  }\n                }\n                return allViewBuild();\n              },\n            ),\n          );\n  }\n\n  Obx allViewBuild() {\n    return Obx(\n      () {\n        return controller.isDualCamera.value\n            ? controller.isLoading.value\n                ? const Center(child: CircularProgressIndicator())\n                : controller.isFinishedRecording.value != true\n                    ? cameraBuildDual()\n                    : videoPlayBack()\n            : controller.isCombining.value\n                ? VideoCombiningLoadingWIdget(controller: controller)\n                : controller.isLoading.value\n                    ? const Center(child: CircularProgressIndicator())\n                    : controller.isFinishedRecording.value != true\n                        ? camerabuild()\n                        : videoPlayBackUpdated();\n      },\n    );\n  }\n\n  GetBuilder<RecordingController> videoPlayBackUpdated() {\n    return GetBuilder(\n      init: controller,\n      builder: (RecordingController controller) {\n        return controller.isFinishedRecording.value\n            ? Stack(\n                children: [\n                  // Show different UI based on whether video is from gallery or recorded\n                  Obx(() => controller.isFileSelected.value ? _buildTrimmerView() : _buildCustomVideoPlayer()),\n\n                  // Top controls\n                  Positioned(\n                    top: 50.h,\n                    left: 20.w,\n                    child: InkWell(\n                      onTap: () {\n                        controller.resetRecording();\n                      },\n                      child: Image.asset(kCloseIcon, width: 32.w, height: 32.h),\n                    ),\n                  ),\n\n                  // Bottom sharing controls\n                  Positioned(\n                    bottom: isFromBottomBar ? 12 : 0.h,\n                    right: 0.w,\n                    child: VideoSharingBottom(\n                      onPressed: () async {\n                        await controller.getLocation();\n                        if (controller.isFileSelected.isTrue) {\n                          await controller.getLocalVideoDetails(controller.outPutFile.value!.path);\n                          await controller.trimVideoUpdated(); // Use updated trim method\n                        }\n                        Get.toNamed(kSharePostScreen);\n                      },\n                    ),\n                  ),\n\n                  // Play/Pause button for trimmer\n                  Obx(\n                    () => controller.isFileSelected.value\n                        ? Positioned(\n                            top: 0,\n                            bottom: 0,\n                            left: 0,\n                            right: 0,\n                            child: Center(\n                              child: Container(\n                                height: 80,\n                                child: Obx(() => TextButton(\n                                      child: controller.isPlaying.value\n                                          ? Icon(\n                                              Icons.pause,\n                                              size: 60.0,\n                                              color: Colors.white,\n                                            )\n                                          : Icon(\n                                              Icons.play_arrow,\n                                              size: 60.0,\n                                              color: Colors.white,\n                                            ),\n                                      onPressed: () async {\n                                        try {\n                                          bool newPlaybackState = await controller.trimmer.value.videoPlaybackControl(\n                                            startValue: controller.startValue.value,\n                                            endValue: controller.endValue.value,\n                                          );\n                                          controller.isPlaying.value = newPlaybackState;\n                                          print('Play button clicked. New playback state: $newPlaybackState');\n                                          print('Start: ${controller.startValue.value}, End: ${controller.endValue.value}');\n                                        } catch (e) {\n                                          print('Error controlling video playback: $e');\n                                        }\n                                      },\n                                    )),\n                              ),\n                            ),\n                          )\n                        : SizedBox.shrink(),\n                  ),\n                ],\n              )\n            : const SizedBox();\n      },\n    );\n  }\n\n  // Helper method for trimmer view (gallery videos)\n  Widget _buildTrimmerView() {\n    return Container(\n      color: Colors.black,\n      child: Column(\n        children: [\n          // Video viewer for trimmer\n          Expanded(\n            child: Obx(() =>\n                controller.trimmer.value != null ? VideoViewer(trimmer: controller.trimmer.value) : const Center(child: CircularProgressIndicator())),\n          ),\n\n          // Trim viewer controls\n          Container(\n            height: 80,\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n            child: Obx(\n              () => TrimViewer(\n                trimmer: controller.trimmer.value,\n                viewerHeight: Platform.isIOS ? 70 : 50.0,\n                viewerWidth: Get.width - 40,\n                maxVideoLength: const Duration(seconds: 20),\n                onChangeStart: (value) {\n                  controller.startValue.value = value;\n                },\n                onChangeEnd: (value) {\n                  controller.endValue.value = value;\n                },\n                onChangePlaybackState: (value) {\n                  controller.isPlaying.value = value;\n                },\n                durationStyle: DurationStyle.FORMAT_MM_SS,\n                editorProperties: TrimEditorProperties(\n                  borderPaintColor: kPrimaryColor,\n                  borderWidth: 4,\n                  borderRadius: 5,\n                  circlePaintColor: kPrimaryColor2,\n                ),\n                areaProperties: TrimAreaProperties.edgeBlur(\n                  thumbnailQuality: 10,\n                ),\n              ),\n            ),\n          ),\n          Container(\n            height: Platform.isIOS ? 110 : 80,\n          )\n        ],\n      ),\n    );\n  }\n\n  // Helper method for custom video player (recorded videos)\n  Widget _buildCustomVideoPlayer() {\n    return Stack(\n      children: [\n        // iOS video player\n        if (Platform.isIOS) ...[\n          Obx(\n            () => controller.videoPlayerController.value == null\n                ? const Center(child: CircularProgressIndicator())\n                : Center(\n                    child: Obx(\n                      () => AspectRatio(\n                        aspectRatio: controller.videoPlayerController.value!.value.aspectRatio,\n                        child: CachedVideoPlayerPlus(controller.videoPlayerController.value!),\n                      ),\n                    ),\n                  ),\n          ),\n        ],\n\n        // Android video player with better handling\n        if (Platform.isAndroid) ...[\n          SizedBox.expand(\n            child: Obx(() {\n              if (controller.videoPlayerController.value == null) {\n                return const Center(child: CircularProgressIndicator());\n              }\n\n              final videoController = controller.videoPlayerController.value!;\n              final videoValue = videoController.value;\n              double width = videoValue.size.width;\n              double height = videoValue.size.height;\n\n              // For portrait recorded videos\n              if (Platform.isAndroid && !controller.isFileSelected.value && controller.rotateValue.value == 0 && controller.isLandScape.isFalse) {\n                Widget videoWidget = CachedVideoPlayerPlus(videoController);\n                videoWidget = RotatedBox(quarterTurns: 0, child: videoWidget);\n\n                return Container(\n                  color: Colors.black,\n                  child: ClipRect(\n                    child: FittedBox(\n                      fit: BoxFit.cover,\n                      child: SizedBox(\n                        width: !controller.isFileSelected.value && controller.rotateValue.value == 0 && height > width ? height : width,\n                        height: !controller.isFileSelected.value && controller.rotateValue.value == 0 && height > width ? width : height,\n                        child: videoWidget,\n                      ),\n                    ),\n                  ),\n                );\n              } else {\n                double aspectRatio = controller.videoPlayerController.value!.value.aspectRatio;\n                return Center(\n                  child: AspectRatio(\n                    aspectRatio: aspectRatio,\n                    child: Container(\n                      color: Colors.black,\n                      child: CachedVideoPlayerPlus(videoController),\n                    ),\n                  ),\n                );\n              }\n            }),\n          ),\n        ],\n\n        // Trim viewer overlay for recorded videos\n        Positioned(\n          top: 100,\n          left: 20,\n          right: 20,\n          child: Obx(\n            () => TrimViewer(\n              trimmer: controller.trimmer.value,\n              viewerHeight: 50.0,\n              paddingFraction: 8,\n              type: ViewerType.auto,\n              viewerWidth: Get.width,\n              maxVideoLength: const Duration(seconds: 20),\n              onChangeStart: (value) => controller.startValue.value = value,\n              onChangeEnd: (value) => controller.endValue.value = value,\n              onChangePlaybackState: (value) => controller.isPlaying.value = value,\n              durationStyle: DurationStyle.FORMAT_MM_SS,\n              editorProperties: TrimEditorProperties(\n                borderPaintColor: kPrimaryColor,\n                borderWidth: 4,\n                borderRadius: 5,\n                circlePaintColor: kPrimaryColor2,\n              ),\n              areaProperties: TrimAreaProperties.edgeBlur(\n                thumbnailQuality: 10,\n              ),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  GetBuilder<RecordingController> videoPlayBack() {\n    return GetBuilder(\n      init: controller,\n      builder: (RecordingController controller) {\n        return controller.isFinishedRecording.value\n            ? Stack(\n                children: [\n                  // Video player section\n                  if (Platform.isIOS) ...[\n                    Obx(\n                      () => controller.videoPlayerController.value == null\n                          ? const Center(child: CircularProgressIndicator())\n                          : Center(\n                              child: Obx(\n                                () => AspectRatio(\n                                  aspectRatio: controller.videoPlayerController.value!.value.aspectRatio,\n                                  child: CachedVideoPlayerPlus(controller.videoPlayerController.value!),\n                                ),\n                              ),\n                            ),\n                    ),\n                  ],\n\n                  if (Platform.isAndroid) ...[\n                    SizedBox.expand(\n                      child: Obx(() {\n                        if (controller.videoPlayerController.value == null) {\n                          return const Center(child: CircularProgressIndicator());\n                        }\n\n                        final videoController = controller.videoPlayerController.value!;\n                        final videoValue = videoController.value;\n                        double width = videoValue.size.width;\n                        double height = videoValue.size.height;\n\n                        // For portrait recorded videos\n                        if (Platform.isAndroid &&\n                            !controller.isFileSelected.value &&\n                            controller.rotateValue.value == 0 &&\n                            controller.isLandScape.isFalse) {\n                          Widget videoWidget = CachedVideoPlayerPlus(videoController);\n                          videoWidget = RotatedBox(quarterTurns: 0, child: videoWidget);\n\n                          return Container(\n                            color: Colors.black,\n                            child: ClipRect(\n                              child: FittedBox(\n                                fit: BoxFit.cover,\n                                child: SizedBox(\n                                  width: !controller.isFileSelected.value && controller.rotateValue.value == 0 && height > width ? height : width,\n                                  height: !controller.isFileSelected.value && controller.rotateValue.value == 0 && height > width ? width : height,\n                                  child: videoWidget,\n                                ),\n                              ),\n                            ),\n                          );\n                        } else {\n                          double aspectRatio = controller.videoPlayerController.value!.value.aspectRatio;\n                          return Center(\n                            child: AspectRatio(\n                              aspectRatio: aspectRatio,\n                              child: Container(\n                                color: Colors.black,\n                                child: CachedVideoPlayerPlus(videoController),\n                              ),\n                            ),\n                          );\n                        }\n                      }),\n                    ),\n                  ],\n\n                  // Trim viewer\n                  Positioned(\n                    top: 100,\n                    left: 20,\n                    right: 20,\n                    child: Obx(\n                      () => TrimViewer(\n                        trimmer: controller.trimmer.value,\n                        viewerHeight: 50.0,\n                        paddingFraction: 8,\n                        type: ViewerType.auto,\n                        viewerWidth: Get.width,\n                        maxVideoLength: const Duration(seconds: 20),\n                        onChangeStart: (value) => controller.startValue.value = value,\n                        onChangeEnd: (value) => controller.endValue.value = value,\n                        onChangePlaybackState: (value) => controller.isPlaying.value = value,\n                        durationStyle: DurationStyle.FORMAT_MM_SS,\n                        editorProperties: TrimEditorProperties(\n                          borderPaintColor: kPrimaryColor,\n                          borderWidth: 4,\n                          borderRadius: 5,\n                          circlePaintColor: kPrimaryColor2,\n                        ),\n                        areaProperties: TrimAreaProperties.edgeBlur(\n                          thumbnailQuality: 10,\n                        ),\n                      ),\n                    ),\n                  ),\n\n                  // Bottom sharing controls\n                  Positioned(\n                    bottom: 0.h,\n                    right: 0.w,\n                    child: VideoSharingBottom(\n                      onPressed: () async {\n                        await controller.getLocation();\n                        if (controller.isFileSelected.isTrue) {\n                          await controller.getLocalVideoDetails(controller.outPutFile.value!.path);\n                          await controller.trimVideo();\n                        }\n                        Get.toNamed(kSharePostScreen);\n                      },\n                    ),\n                  ),\n\n                  // Close button\n                  Positioned(\n                    top: 50.h,\n                    left: 20.w,\n                    child: InkWell(\n                      onTap: () {\n                        controller.resetRecording();\n                      },\n                      child: Image.asset(kCloseIcon, width: 32.w, height: 32.h),\n                    ),\n                  ),\n                ],\n              )\n            : const SizedBox();\n      },\n    );\n  }\n\n  // FIXED: Camera build with better error handling\n  camerabuild() {\n    return GetBuilder<RecordingController>(\n      init: controller,\n      builder: (_) {\n        return Stack(\n          children: [\n            // Camera preview with error handling\n            if (Platform.isIOS) ...[\n              Center(\n                child: Obx(\n                  () {\n                    // Show error state\n                    if (controller.isCameraError.value) {\n                      return _buildCameraErrorWidget();\n                    }\n\n                    // Show loading\n                    if (controller.isLoading.value) {\n                      return const Center(child: CircularProgressIndicator());\n                    }\n\n                    return RotatedBox(\n                      quarterTurns: controller.isLandScape.value ? 1 : 0,\n                      child: GestureDetector(\n                        onDoubleTap: controller.doubleTapZoom,\n                        onScaleStart: (details) {\n                          controller.onScaleStart(details);\n                        },\n                        onScaleUpdate: (details) {\n                          controller.onScaleUpdate(details);\n                        },\n                        child: Obx(\n                          () {\n                            final cameraController = controller.cameraController.value;\n                            if (cameraController == null || !cameraController.value.isInitialized) {\n                              return const Center(child: CircularProgressIndicator());\n                            }\n                            return CameraPreview(cameraController);\n                          },\n                        ),\n                      ),\n                    );\n                  },\n                ),\n              ),\n            ],\n\n            if (Platform.isAndroid) ...[\n              SizedBox.expand(\n                child: GetBuilder<RecordingController>(\n                  id: 'camera_preview',\n                  builder: (controller) {\n                    // Show error state\n                    if (controller.isCameraError.value) {\n                      return _buildCameraErrorWidget();\n                    }\n\n                    // Show loading\n                    if (controller.isLoading.value) {\n                      return const Center(child: CircularProgressIndicator());\n                    }\n\n                    final cameraController = controller.cameraController.value;\n                    if (cameraController == null || !cameraController.value.isInitialized) {\n                      return const Center(child: CircularProgressIndicator());\n                    }\n\n                    // Check for camera errors\n                    if (cameraController.value.hasError) {\n                      return _buildCameraErrorWidget();\n                    }\n\n                    return RotatedBox(\n                      quarterTurns: controller.isLandScape.value ? 1 : 0,\n                      child: ClipRect(\n                        child: OverflowBox(\n                          alignment: Alignment.center,\n                          child: AspectRatio(\n                            aspectRatio: cameraController.value.aspectRatio,\n                            child: GestureDetector(\n                              onDoubleTap: controller.doubleTapZoom,\n                              onScaleStart: (details) {\n                                controller.onScaleStart(details);\n                              },\n                              onScaleUpdate: (details) {\n                                controller.onScaleUpdate(details);\n                              },\n                              child: CameraPreview(cameraController),\n                            ),\n                          ),\n                        ),\n                      ),\n                    );\n                  },\n                ),\n              )\n            ],\n\n            // Back/Skip button\n            Positioned(\n              top: !SessionService().isUserLoggedIn ? 48.h : 38.h,\n              right: SessionService().isUserLoggedIn ? Get.width * 0.85 : 10.w,\n              left: SessionService().isUserLoggedIn ? 0.w : Get.width * 0.82,\n              child: GestureDetector(\n                onTap: () async {\n                  await controller.cameraController.value?.unlockCaptureOrientation();\n                  if (SessionService().isUserLoggedIn) {\n                    controller.resetRecording();\n                    Get.find<BottomBarController>().selectedIndex.value = 0;\n                    Get.find<BottomBarController>().previousSelectedIndex.value = 0;\n                  } else {\n                    printLogs(\"Calling Login Route from skip\");\n                    controller.resetRecording();\n                    Get.find<BottomBarController>().selectedIndex.value = 0;\n                    Get.find<BottomBarController>().previousSelectedIndex.value = 0;\n                    Get.offAndToNamed(kSignInRoute);\n                  }\n                },\n                child: Padding(\n                    padding: EdgeInsets.only(left: 10.w),\n                    child: SessionService().isUserLoggedIn\n                        ? const Icon(\n                            Icons.arrow_back_ios,\n                            size: 36,\n                            color: kPrimaryColor,\n                          )\n                        : ClipRRect(\n                            borderRadius: const BorderRadius.all(Radius.circular(100)),\n                            child: Container(\n                              padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 5),\n                              color: kWhiteColor.withAlpha(70),\n                              child: Text(\n                                'Skip',\n                                textAlign: TextAlign.center,\n                                style: AppStyles.labelTextStyle().copyWith(fontWeight: FontWeight.w400, fontSize: 12.sp, color: kPrimaryColor),\n                              ),\n                            ),\n                          )),\n              ),\n            ),\n\n            // App logo\n            Positioned(\n              top: 8.h,\n              left: 0.w,\n              right: 0.w,\n              child: Center(\n                child: Image.asset(kAppLogo, height: 100.h, width: 100.w),\n              ),\n            ),\n\n            // Record button for non-logged in users\n            if (!SessionService().isUserLoggedIn)\n              Positioned(\n                bottom: 25.h,\n                right: 50.w,\n                left: 50.w,\n                child: _buildRecordButton(),\n              ),\n\n            // Record button for logged in users\n            if (SessionService().isUserLoggedIn)\n              Positioned(\n                bottom: 25.h,\n                right: 50.w,\n                left: 50.w,\n                child: Obx(\n                  () => controller.isRecording.value ? _buildRecordButton() : SizedBox.shrink(),\n                ),\n              ),\n\n            // Camera switch button\n            Positioned(\n                bottom: 20.h,\n                right: 40.w,\n                child: Obx(\n                  () => controller.isRecording.value\n                      ? SizedBox.shrink()\n                      : IconButton(\n                          icon: Icon(\n                            Icons.cameraswitch_sharp,\n                            color: kPrimaryColor,\n                            size: 50.sp,\n                          ),\n                          onPressed: () {\n                            final currentTime = DateTime.now();\n                            if (currentTime.difference(controller.lastSwitchTime.value).inSeconds >= 3) {\n                              controller.lastSwitchTime.value = currentTime;\n                              controller.isFaceCam.value = !controller.isFaceCam.value;\n                              controller.switchCameraForNonDual();\n                            } else {\n                              CustomSnackbar.showSnackbar('Too Early to switch camera');\n                            }\n                          },\n                        ),\n                )),\n\n            // Orientation tabs\n            Positioned(\n              bottom: !SessionService().isUserLoggedIn ? 135 : 20,\n              right: 0.w,\n              left: 0,\n              child: Obx(\n                () => controller.isRecording.value\n                    ? SizedBox.shrink()\n                    : Container(\n                        padding: EdgeInsets.symmetric(horizontal: 20.w),\n                        child: Row(\n                          mainAxisAlignment: MainAxisAlignment.center,\n                          children: [\n                            // Portrait Tab\n                            GestureDetector(\n                              onTap: () {\n                                final currentTime = DateTime.now();\n                                if (currentTime.difference(controller.lastSwitchTime.value).inMicroseconds >= 500) {\n                                  controller.lastSwitchTime.value = currentTime;\n                                  if (controller.isPortrait.isFalse) {\n                                    controller.isLandScape.value = false;\n                                    controller.isPortrait.value = true;\n                                    controller.resetRecording(isFrom: 'Portrait');\n                                  }\n                                } else {\n                                  CustomSnackbar.showSnackbar('Too Early to switch orientation');\n                                }\n                              },\n                              child: Container(\n                                padding: EdgeInsets.symmetric(horizontal: 5.w, vertical: 5.h),\n                                decoration: BoxDecoration(\n                                  color: controller.isPortrait.isTrue ? kPrimaryColor.withOpacity(0.2) : Colors.transparent,\n                                  borderRadius: BorderRadius.circular(5.r),\n                                  border: Border.all(\n                                    color: controller.isPortrait.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.5),\n                                    width: 2,\n                                  ),\n                                ),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.min,\n                                  children: [\n                                    Icon(\n                                      Icons.screen_lock_portrait,\n                                      color: controller.isPortrait.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.7),\n                                      size: 12.sp,\n                                    ),\n                                    SizedBox(width: 8.w),\n                                    Text(\n                                      'Portrait',\n                                      style: TextStyle(\n                                        color: controller.isPortrait.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.7),\n                                        fontSize: 14.sp,\n                                        fontWeight: controller.isPortrait.isTrue ? FontWeight.bold : FontWeight.normal,\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ),\n                            ),\n\n                            SizedBox(width: 12.w),\n\n                            // Landscape Tab\n                            GestureDetector(\n                              onTap: () {\n                                final currentTime = DateTime.now();\n                                if (currentTime.difference(controller.lastSwitchTime.value).inMicroseconds >= 500) {\n                                  controller.lastSwitchTime.value = currentTime;\n                                  if (controller.isLandScape.isFalse) {\n                                    controller.isPortrait.value = false;\n                                    controller.isLandScape.value = true;\n                                    controller.resetRecording(isFrom: \"LandScape\");\n                                  }\n                                } else {\n                                  CustomSnackbar.showSnackbar('Too Early to switch orientation');\n                                }\n                              },\n                              child: Container(\n                                padding: EdgeInsets.symmetric(horizontal: 5.w, vertical: 5.h),\n                                decoration: BoxDecoration(\n                                  color: controller.isLandScape.isTrue ? kPrimaryColor.withOpacity(0.2) : Colors.transparent,\n                                  borderRadius: BorderRadius.circular(5.r),\n                                  border: Border.all(\n                                    color: controller.isLandScape.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.5),\n                                    width: 2,\n                                  ),\n                                ),\n                                child: Row(\n                                  mainAxisSize: MainAxisSize.min,\n                                  children: [\n                                    Icon(\n                                      Icons.videocam,\n                                      color: controller.isLandScape.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.7),\n                                      size: 12.sp,\n                                    ),\n                                    SizedBox(width: 8.w),\n                                    Text(\n                                      'Landscape',\n                                      style: TextStyle(\n                                        color: controller.isLandScape.isTrue ? kPrimaryColor : kPrimaryColor.withOpacity(0.7),\n                                        fontSize: 14.sp,\n                                        fontWeight: controller.isLandScape.isTrue ? FontWeight.bold : FontWeight.normal,\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n              ),\n            ),\n\n            // Upload/Gallery button\n            Positioned(\n              bottom: 20.h,\n              left: 50.w,\n              child: Obx(\n                () => controller.isRecording.value\n                    ? SizedBox.shrink()\n                    : GestureDetector(\n                        onTap: () {\n                          Get.find<RecordingController>().showQualityRulesSheet();\n                        },\n                        child: Image.asset(\n                          kUploadIcon,\n                          width: 50.w,\n                        ),\n                      ),\n              ),\n            ),\n\n            // Zoom slider\n            Positioned(\n              right: 20.w,\n              bottom: Get.height * 0.10,\n              child: Obx(() => RotatedBox(\n                    quarterTurns: 3,\n                    child: SliderTheme(\n                      data: SliderThemeData(\n                        trackHeight: 8,\n                        activeTrackColor: kPrimaryColor,\n                        inactiveTrackColor: kPrimaryColor.withOpacity(0.3),\n                        thumbColor: kPrimaryColor,\n                        overlayColor: kPrimaryColor.withOpacity(0.2),\n                        activeTickMarkColor: kPrimaryColor,\n                        inactiveTickMarkColor: kPrimaryColor.withOpacity(0.5),\n                        tickMarkShape: RoundSliderTickMarkShape(tickMarkRadius: 3),\n                      ),\n                      child: Slider(\n                        value: controller.sliderZoomValue.value,\n                        min: 1.0,\n                        max: 8.0,\n                        divisions: 15,\n                        onChanged: (value) {\n                          controller.onZoomSliderChanged(value);\n                        },\n                      ),\n                    ),\n                  )),\n            ),\n\n            // Countdown overlay\n            buildCountdownOverlay(),\n          ],\n        );\n      },\n    );\n  }\n\n  // Helper method to build camera error widget\n  Widget _buildCameraErrorWidget() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(\n            Icons.camera_alt_outlined,\n            size: 80,\n            color: Colors.grey,\n          ),\n          SizedBox(height: 16),\n          Text(\n            'Camera Error',\n            style: TextStyle(\n              color: Colors.white,\n              fontSize: 18,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          SizedBox(height: 8),\n          Text(\n            'Failed to initialize camera',\n            style: TextStyle(\n              color: Colors.grey,\n              fontSize: 14,\n            ),\n          ),\n          SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: () {\n              controller.retryCameraInitialization();\n            },\n            style: ElevatedButton.styleFrom(\n              backgroundColor: kPrimaryColor,\n              foregroundColor: Colors.black,\n            ),\n            child: Text('Retry'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  // Helper method to build record button\n  Widget _buildRecordButton() {\n    return GestureDetector(\n      onTap: () async {\n        if (controller.isRecordingStarted.value) {\n          await controller.stopRecordingForNonDual();\n          controller.isRecordingStarted.value = false;\n        } else {\n          if (await PermissionsService().hasCameraPermission()) {\n            controller.startCountdown();\n            controller.isRecordingStarted.value = true;\n          } else {\n            await PermissionsService().requestCameraPermission(\n              onPermissionGranted: () {\n                printLogs(\"Camera permission granted\");\n              },\n              onPermissionDenied: () {\n                printLogs(\"Camera permission denied\");\n                CustomSnackbar.showSnackbar(\"Camera permission is required for recording, please enable it from settings\");\n              },\n            );\n          }\n        }\n      },\n      child: Stack(\n        alignment: Alignment.center,\n        children: [\n          Obx(() => controller.isRecording.value\n              ? const SizedBox()\n              : RotatedBox(\n                  quarterTurns: controller.rotateValue.value.toInt(),\n                  child: SizedBox(\n                    height: 80.h,\n                    width: 80.w,\n                    child: Image.asset(kAppLogo, height: 100.h, width: 100.w),\n                  ),\n                )),\n          Obx(\n            () => controller.isRecording.value\n                ? RotatedBox(quarterTurns: controller.rotateValue.value.toInt(), child: CountDownWidget(controller: controller))\n                : SizedBox(\n                    height: 100.h,\n                    width: 100.w,\n                    child: Image.asset(kRecordingCircle, height: 100.h, width: 100.w),\n                  ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Stack cameraBuildDual() {\n    return Stack(\n      children: [\n        SizedBox(height: Get.height, width: Get.width, child: CameraPreview(controller.backCameraController.value!)),\n        Obx(() => Positioned(\n              top: 60.h,\n              left: 240.w,\n              right: 0.w,\n              child: SizedBox(\n                height: 200.h,\n                width: 200.w,\n                child: CameraPreview(controller.frontCameraController.value!),\n              ),\n            )),\n        Positioned(\n          bottom: 18.h,\n          right: 50.w,\n          left: 50.w,\n          child: GestureDetector(\n            onTap: () {\n              if (controller.isRecordingStarted.value) {\n                controller.stopRecordingForDual();\n                controller.isRecordingStarted.value = false;\n              } else {\n                controller.startRecordingForDual();\n                controller.isRecordingStarted.value = true;\n              }\n            },\n            child: Obx(\n              () => controller.isRecording.value\n                  ? CountDownWidget(controller: controller)\n                  : SizedBox(\n                      height: 100.h,\n                      width: 100.w,\n                      child: Image.asset(kRecordingCircle, height: 100.h, width: 100.w),\n                    ),\n            ),\n          ),\n        ),\n        Obx(() => Visibility(\n              visible: controller.isRecording.value,\n              child: Positioned(\n                bottom: 45.h,\n                left: 80.w,\n                child: SizedBox(\n                  height: 35.h,\n                  width: 35.w,\n                  child: Image.asset(kLockIcon),\n                ),\n              ),\n            )),\n      ],\n    );\n  }\n\n  Widget buildCountdownOverlay() {\n    return Obx(() {\n      if (controller.isCountingDown.value) {\n        return Container(\n          width: double.infinity,\n          height: double.infinity,\n          color: Colors.black.withOpacity(0.5),\n          child: Center(\n            child: Text(\n              \"${controller.countdownValue.value}\",\n              style: TextStyle(\n                fontSize: 80,\n                fontWeight: FontWeight.bold,\n                color: Colors.white,\n              ),\n            ),\n          ),\n        );\n      } else {\n        return const SizedBox.shrink();\n      }\n    });\n  }\n}\n"
        }
    ]
}