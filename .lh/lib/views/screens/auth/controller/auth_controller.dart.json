{
    "sourceFile": "lib/views/screens/auth/controller/auth_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759230958155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759230958155,
            "name": "Commit-0",
            "content": "import 'dart:developer';\n\n// import 'package:the_apple_sign_in/the_apple_sign_in.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_facebook_auth/flutter_facebook_auth.dart';\nimport 'package:get/get.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:sign_in_with_apple/sign_in_with_apple.dart';\nimport 'package:socials_app/main.dart';\nimport 'package:socials_app/repositories/auth_repo.dart';\nimport 'package:socials_app/services/custom_snackbar.dart';\nimport 'package:socials_app/services/session_services.dart';\nimport 'package:socials_app/services/sharedprefrence_service.dart';\nimport 'package:socials_app/utils/app_colors.dart';\nimport 'package:socials_app/utils/app_strings.dart';\nimport 'package:socials_app/views/screens/home_recordings/controller/recording_cont.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nimport '../../../../utils/common_code.dart';\n\nclass AuthController extends GetxController {\n  GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();\n  GlobalKey<FormState> loginFormKey = GlobalKey<FormState>();\n  TextEditingController tecUserName = TextEditingController(), tecEmail = TextEditingController(), tecPassword = TextEditingController();\n  FocusNode fnUsername = FocusNode(), fnEmail = FocusNode(), fnPassword = FocusNode();\n  RxBool isHidePassword = true.obs;\n  RxBool showOtherFields = false.obs;\n  RxBool isAllFieldFilled = false.obs;\n  final GoogleSignIn googleSignIn = GoogleSignIn();\n  RxBool isLoading1 = false.obs;\n  RxBool isLoading3 = false.obs;\n  final _auth = FirebaseAuth.instance;\n  RxBool isFullLoading = false.obs;\n  RxBool isVaildEmail = false.obs;\n  RxBool termAndConditionAccepted = false.obs;\n  @override\n  void onInit() {\n    super.onInit();\n    tecEmail.addListener(_checkAllFieldsFilled);\n    tecUserName.addListener(_checkAllFieldsFilled);\n    tecPassword.addListener(_checkAllFieldsFilled);\n  }\n\n  void _checkAllFieldsFilled() {\n    isAllFieldFilled.value = tecEmail.text.trim().isNotEmpty && tecUserName.text.isNotEmpty && tecPassword.text.isNotEmpty;\n  }\n\n  @override\n  void onClose() {\n    tecEmail.removeListener(_checkAllFieldsFilled);\n    tecUserName.removeListener(_checkAllFieldsFilled);\n    tecPassword.removeListener(_checkAllFieldsFilled);\n    super.onClose();\n  }\n\n  Future signInWithGoogle(BuildContext context) async {\n    try {\n      final GoogleSignInAccount? userAccount = await googleSignIn.signIn();\n      if (userAccount == null) {\n        isLoading1.value = false;\n        Get.snackbar(\n          backgroundColor: kWhiteColor,\n          'Login unsuccessful',\n          'Sign in with Google canceled.',\n        );\n        return;\n      }\n      final GoogleSignInAuthentication googleAuth = await userAccount.authentication;\n      final AuthCredential credential = GoogleAuthProvider.credential(\n        accessToken: googleAuth.accessToken,\n        idToken: googleAuth.idToken,\n      );\n      UserCredential userCredential = await FirebaseAuth.instance.signInWithCredential(credential);\n      // FirebaseAuth.instance.signInWithCredential(credential);\n      termAndConditionAccepted.value = true;\n      await AuthRepo()\n          .signUpWithGoogle(\n              deviceId: deviceToken,\n              email: userAccount.email,\n              name: userAccount.displayName ?? '',\n              id: googleAuth.accessToken,\n              termAndCondition: termAndConditionAccepted.isTrue)\n          .then((value) async {\n        if (value != null && value.authToken != \"\") {\n          isLoading1.value = false;\n          CustomSnackbar.showSnackbar('Login Successful');\n          await videoUploadFirstTime();\n          if (Get.find<RecordingController>().isVideoAvailable.value) {\n            printLogs(\"===========going to profile signInWithGoogle\");\n            Get.offAllNamed(kBottomNavBar);\n          } else {\n            Get.offAllNamed(kBottomNavBar);\n          }\n          /*await videoUploadFirstTime();\n\n          if (Get.find<RecordingController>().isVideoAvailable.value) {\n            Get.toNamed(kBottomNavBar);\n          } else {\n            Get.toNamed(kBottomNavBar);\n          }*/\n        } else {\n          isLoading1.value = false;\n          CustomSnackbar.showSnackbar('Login Unsuccessful');\n        }\n      });\n    } catch (e) {\n      printLogs('===google sign in Error: $e');\n      isLoading1.value = false;\n      Get.snackbar(backgroundColor: kWhiteColor, 'Data not found', 'Please enter valid credentials. $e');\n    }\n  }\n\n  Future signInWithApple(BuildContext context) async {\n    try {\n      final AuthorizationCredentialAppleID authorizationResult = await SignInWithApple.getAppleIDCredential(\n        scopes: [\n          AppleIDAuthorizationScopes.email,\n          AppleIDAuthorizationScopes.fullName,\n        ],\n      );\n\n      final AuthCredential credential = OAuthProvider('apple.com').credential(\n        idToken: authorizationResult.identityToken,\n        accessToken: authorizationResult.authorizationCode,\n      );\n      UserCredential userCredential = await FirebaseAuth.instance.signInWithCredential(credential);\n      isLoading1.value = false;\n      isLoading3.value = false;\n\n      printLogs(\"======deviceToken $deviceToken\");\n      if (deviceToken.isEmpty) {\n        deviceToken = await FirebaseMessaging.instance.getToken() ?? '';\n      }\n      termAndConditionAccepted.value = true;\n      final resp = await AuthRepo().signInWithApple(\n          deviceId: deviceToken,\n          email: userCredential.user?.email ?? '',\n          name: userCredential.user != null\n              ? userCredential.user!.displayName != null && userCredential.user!.displayName!.isNotEmpty\n                  ? userCredential.user!.displayName!\n                  : userCredential.user?.email != null\n                      ? userCredential.user!.email!.split(\"@\")[0]\n                      : \"\"\n              : \"\",\n          id: credential.accessToken ?? '',\n          termAndCondition: termAndConditionAccepted.isTrue);\n      if (resp != null) {\n        printLogs('Data: ${resp.email}');\n        CustomSnackbar.showSnackbar('Login Successful');\n        await videoUploadFirstTime();\n        if (Get.find<RecordingController>().isVideoAvailable.value) {\n          printLogs(\"===========going to profile apple\");\n          Get.offAllNamed(kBottomNavBar);\n        } else {\n          Get.offAllNamed(kBottomNavBar);\n        }\n      } else {\n        CustomSnackbar.showSnackbar('Login Unsuccessful');\n      }\n      // Get.toNamed(kBottomNavBar);\n    } catch (e) {\n      printLogs(\"SignInWithApple Exception $e\");\n      isLoading3.value = false;\n      isLoading1.value = false;\n      Get.snackbar(backgroundColor: kWhiteColor, 'Data not found', 'Please enter valid credentials.');\n    }\n  }\n\n  /// sign in with facebook\n  Future<void> signInWithFacebook() async {\n    // CustomSnackbar.showSnackbar('Coming Soon');\n    try {\n      final LoginResult result = await FacebookAuth.instance.login(permissions: ['email', 'public_profile']);\n\n      // Map<String, dynamic> userData = {};\n      if (result.status == LoginStatus.success) {\n        final userData = await FacebookAuth.instance.getUserData();\n\n        // log(result.message ?? '');\n        termAndConditionAccepted.value = true;\n        final resp = await AuthRepo().signInWithFacebook(\n            id: result.accessToken?.tokenString ?? '',\n            email: userData['email'] ?? '',\n            name: userData['name'] ?? '',\n            termAndCondition: termAndConditionAccepted.isTrue);\n        if (resp != null) {\n          CustomSnackbar.showSnackbar('Login Successful');\n          await videoUploadFirstTime();\n          if (Get.find<RecordingController>().isVideoAvailable.value) {\n            printLogs(\"===========going to profile signInWithFacebook\");\n            Get.offAllNamed(kBottomNavBar);\n          } else {\n            Get.offAllNamed(kBottomNavBar);\n          }\n          /*\n\n          await videoUploadFirstTime();\n          if (Get.find<RecordingController>().isVideoAvailable.value) {\n            Get.toNamed(kBottomNavBar);\n          } else {\n            Get.toNamed(kBottomNavBar);\n          }*/\n        } else {\n          CustomSnackbar.showSnackbar('Login Unsuccessful');\n        }\n      } else {\n        CustomSnackbar.showSnackbar('Login Unsuccessful');\n      }\n    } catch (e) {\n      log('Error Login: $e');\n      CustomSnackbar.showSnackbar('Login Unsuccessful');\n    }\n  }\n\n  /// This function is used to register the user\n  Future<void> registerUser() async {\n    try {\n      isFullLoading.value = true;\n      final data = await AuthRepo().registerUser(\n        email: tecEmail.text.trim(),\n        password: tecPassword.text,\n        name: tecUserName.text,\n        termAndCondition: termAndConditionAccepted.isTrue,\n        deviceId: deviceToken,\n      );\n      // printLogs('========data $data');\n      if (data != null) {\n        isLoading1.value = false;\n        CustomSnackbar.showSnackbar('Registration Successful');\n        await videoUploadFirstTime();\n        // Get.toNamed(kBottomNavBar);\n        Get.toNamed(kBottomNavBar);\n        isFullLoading.value = false;\n        printLogs(\"===========going to profile registerUser\");\n        // Get.offAllNamed(kBottomNavBar);\n      } else {\n        isLoading1.value = false;\n        isFullLoading.value = false;\n        CustomSnackbar.showSnackbar('Registration Unsuccessful');\n      }\n    } catch (e) {\n      isLoading1.value = false;\n      isFullLoading.value = false;\n      CustomSnackbar.showSnackbar('Registration Unsuccessful');\n    }\n  }\n\n  /// This function is used to login the user\n  Future<void> loginUser() async {\n    isFullLoading.value = true;\n    try {\n      final data = await AuthRepo().loginUser(\n        email: tecEmail.text.trim(),\n        password: tecPassword.text,\n        deviceId: deviceToken,\n      );\n      if (data != null) {\n        CustomSnackbar.showSnackbar('Login Successful');\n        await videoUploadFirstTime();\n\n        printLogs(\"===========going to profile loginUser\");\n        Get.offAllNamed(kBottomNavBar);\n      } else {\n        // CustomSnackbar.showSnackbar('Login Unsuccessful');\n      }\n    } catch (e) {\n      isLoading1.value = false;\n      CustomSnackbar.showSnackbar('Login Unsuccessful');\n    }\n    isFullLoading.value = false;\n  }\n\n  /// fn to check if the user is exist or not\n  RxBool isUserExist = false.obs;\n  Future<void> checkUser() async {\n    try {\n      final data = await AuthRepo().checkUserExist(\n        email: tecEmail.text.trim(),\n      );\n\n      printLogs('Data checkUser: $data');\n      if (data) {\n        isUserExist.value = true;\n      } else {}\n    } catch (e) {\n      log('Error checkUser: $e');\n    }\n  }\n\n  checkUserANdVideo() {\n    Get.isRegistered<RecordingController>() ? Get.find<RecordingController>() : Get.put(RecordingController());\n    SharedPrefrenceService.setIsFirstVideo();\n    return (SessionService().isUserLoggedIn && Get.find<RecordingController>().isVideoAvailable.value);\n  }\n\n  //// fn for video upload if first time\n  Future<bool> videoUploadFirstTime() async {\n    printLogs('=======uploading videos first time');\n    Get.isRegistered<RecordingController>() ? Get.find<RecordingController>() : Get.put(RecordingController());\n\n    bool isExist = SessionService().isUserLoggedIn && Get.find<RecordingController>().isVideoAvailable.value;\n    if (isExist) {\n      printLogs('=======uploading videos first time available');\n      await SharedPrefrenceService.setIsFirstVideo();\n      bool isAdded = await Get.find<RecordingController>().videoUploadFirstTime();\n      return isAdded;\n    } else {\n      return isExist;\n    }\n  }\n\n  //open t&c\n  Future<void> launchTermsAndPrivacyUrl() async {\n    //final Uri _url = Uri.parse('https://app.termly.io/policy-viewer/policy.html?policyUUID=39e5fa85-27e2-43da-a164-b75e93ce1488');\n    final Uri _url = Uri.parse('https://app.termly.io/policy-viewer/policy.html?policyUUID=6911806b-c1c8-4de8-a493-a2a2714e20e8');\n    if (!await launchUrl(_url)) {\n      throw Exception('Could not launch $_url');\n    } else {\n      termAndConditionAccepted.value = true;\n    }\n  }\n}\n"
        }
    ]
}