{
    "sourceFile": "lib/views/screens/bottom/bottom_bar_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759231048244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759231159103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,10 @@\n       //           Get.toNamed(kRecordingRoute);\n       //         },\n       //         child: CircleAvatar(backgroundColor: kPrimaryColor,radius: 50.r,)),),\n       bottomNavigationBar: Obx(\n-        () => (SessionService().isUserLoggedIn && Get.find<RecordingController>().isRecording.value)\n+        () => (SessionService().isUserLoggedIn &&\n+                Get.find<RecordingController>().isRecording.value)\n             ? SizedBox.shrink()\n             : BottomNavigationBar(\n                 type: BottomNavigationBarType.fixed,\n                 selectedFontSize: 16.sp,\n@@ -81,9 +82,10 @@\n                   Get.isRegistered<HomeScreenController>() ? Get.find<HomeScreenController>() : Get.put(HomeScreenController());\n \n               // homeScreenController.videoControllers[homeScreenController.previousValue.bitLength]?.play();\n             }*/\n-                  if (index == 1 && Get.find<RecordingController>().isRecording.value) {\n+                  if (index == 1 &&\n+                      Get.find<RecordingController>().isRecording.value) {\n                     Get.find<RecordingController>().stopRecordingForNonDual();\n                     Get.find<RecordingController>().isRecording.value = false;\n                     // Get.find<RecordingController>().checkAndReinitializeCamera();\n \n@@ -132,10 +134,14 @@\n                     //   },\n                     // );\n                     /*Get.find<RecordingController>().resetRecording();\n               Get.find<RecordingController>().onInit();*/\n-                  } else if (controller.previousSelectedIndex.value == 1 && index == 1 && !Get.find<RecordingController>().isRecording.value) {\n-                    if (Get.find<RecordingController>().isFinishedRecording.isTrue) {\n+                  } else if (controller.previousSelectedIndex.value == 1 &&\n+                      index == 1 &&\n+                      !Get.find<RecordingController>().isRecording.value) {\n+                    if (Get.find<RecordingController>()\n+                        .isFinishedRecording\n+                        .isTrue) {\n                       Get.find<RecordingController>().resetRecording();\n                     }\n                     printLogs('============inside second if');\n                     // Get.find<RecordingController>().resetRecording();\n@@ -147,9 +153,10 @@\n                           printLogs(\"Camera permission granted\");\n                         },\n                         onPermissionDenied: () {\n                           printLogs(\"Camera permission denied\");\n-                          CustomSnackbar.showSnackbar(\"Camera permission is required for recording, please enable it from settings\");\n+                          CustomSnackbar.showSnackbar(\n+                              \"Camera permission is required for recording, please enable it from settings\");\n                         },\n                       );\n                     }\n                     // Get.find<RecordingController>().showQualityRulesSheet();\n@@ -162,9 +169,11 @@\n                     //     Get.isRegistered<SocialWalletController>() ? Get.find<SocialWalletController>() : Get.put(SocialWalletController());\n                     // socialWalletController.getWalletBalance();\n                   } else if (index == 0) {\n                     ProfileScreenController profileScreenController =\n-                        Get.isRegistered<ProfileScreenController>() ? Get.find<ProfileScreenController>() : Get.put(ProfileScreenController());\n+                        Get.isRegistered<ProfileScreenController>()\n+                            ? Get.find<ProfileScreenController>()\n+                            : Get.put(ProfileScreenController());\n                     profileScreenController.getData();\n                   }\n                   controller.previousSelectedIndex.value = index;\n                 },\n@@ -178,41 +187,60 @@\n               label: ' ',\n             ),*/\n \n                   BottomNavigationBarItem(\n-                    icon: _buildNavItem(kProfileInactive, kUserActive, controller.selectedIndex.value == 0),\n+                    icon: _buildNavItem(kProfileInactive, kUserActive,\n+                        controller.selectedIndex.value == 0),\n                     label: ' ',\n                   ),\n                   BottomNavigationBarItem(\n                     backgroundColor: Colors.black,\n                     icon: Obx(\n                       () => GestureDetector(\n-                          onLongPress: controller.selectedIndex.value == 1 && Get.find<RecordingController>().isRecording.value\n+                          onLongPress: controller.selectedIndex.value == 1 &&\n+                                  Get.find<RecordingController>()\n+                                      .isRecording\n+                                      .value\n                               ? () async {\n-                                  if (Get.find<RecordingController>().isFinishedRecording.isTrue) {\n-                                    Get.find<RecordingController>().resetRecording();\n+                                  if (Get.find<RecordingController>()\n+                                      .isFinishedRecording\n+                                      .isTrue) {\n+                                    Get.find<RecordingController>()\n+                                        .resetRecording();\n                                   }\n                                   // Get.find<RecordingController>().resetRecording();\n-                                  if (await PermissionsService().hasCameraPermission()) {\n-                                    Get.find<RecordingController>().initalization();\n+                                  if (await PermissionsService()\n+                                      .hasCameraPermission()) {\n+                                    Get.find<RecordingController>()\n+                                        .initalization();\n                                   } else {\n-                                    await PermissionsService().requestCameraPermission(\n+                                    await PermissionsService()\n+                                        .requestCameraPermission(\n                                       onPermissionGranted: () {\n                                         printLogs(\"Camera permission granted\");\n                                       },\n                                       onPermissionDenied: () {\n                                         printLogs(\"Camera permission denied\");\n-                                        CustomSnackbar.showSnackbar(\"Camera permission is required for recording, please enable it from settings\");\n+                                        CustomSnackbar.showSnackbar(\n+                                            \"Camera permission is required for recording, please enable it from settings\");\n                                       },\n                                     );\n                                   }\n                                   // Get.find<RecordingController>().showQualityRulesSheet();\n                                 }\n                               : null,\n-                          child: controller.selectedIndex.value == 1 && Get.find<RecordingController>().isRecording.value\n+                          child: controller.selectedIndex.value == 1 &&\n+                                  Get.find<RecordingController>()\n+                                      .isRecording\n+                                      .value\n                               ? RotatedBox(\n-                                  quarterTurns: Get.find<RecordingController>().rotateValue.value.toInt(),\n-                                  child: CountDownWidget(controller: Get.find<RecordingController>()))\n+                                  quarterTurns: Get.find<RecordingController>()\n+                                      .rotateValue\n+                                      .value\n+                                      .toInt(),\n+                                  child: CountDownWidget(\n+                                      controller:\n+                                          Get.find<RecordingController>()))\n                               : Image.asset(\n                                   kRecording,\n                                   width: 65.w,\n                                   height: 65.w,\n@@ -220,18 +248,20 @@\n                     ),\n                     label: ' ',\n                   ),\n                   BottomNavigationBarItem(\n-                    icon: _buildNavItem(kMessageInactive, kMessageActive, controller.selectedIndex.value == 2),\n+                    icon: _buildNavItem(kMessageInactive, kMessageActive,\n+                        controller.selectedIndex.value == 2),\n                     label: ' ',\n                   ),\n                 ],\n               ),\n       ),\n     );\n   }\n \n-  Widget _buildNavItem(String inactiveIcon, String activeIcon, bool isSelected) {\n+  Widget _buildNavItem(\n+      String inactiveIcon, String activeIcon, bool isSelected) {\n     return Column(\n       mainAxisAlignment: MainAxisAlignment.center,\n       children: [\n         Image.asset(\n"
                }
            ],
            "date": 1759231048241,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\nimport 'package:get/get.dart';\nimport 'package:socials_app/services/permission_service.dart';\nimport 'package:socials_app/utils/app_colors.dart';\nimport 'package:socials_app/utils/app_images.dart';\nimport 'package:socials_app/views/screens/home_recordings/controller/recording_cont.dart';\nimport 'package:socials_app/views/screens/profile/controller/profile_controller.dart';\n\nimport '../../../services/custom_snackbar.dart';\nimport '../../../services/session_services.dart';\nimport '../../../utils/common_code.dart';\nimport '../home_recordings/components/countdown_widget.dart';\nimport 'controller/bottom_bar_controller.dart';\n\nclass BottomNavigationScreen extends GetView<BottomBarController> {\n  const BottomNavigationScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    Get.log(\"Build Method\");\n    /*Future.microtask((){\n      Get.isRegistered<RecordingController>() ? Get.find<RecordingController>() : Get.put(RecordingController());\n\n      if (SessionService().isUserLoggedIn && Get.find<RecordingController>().isVideoAvailable.value) {\n        printLogs('=======uploading videos first time available');\n        Get.find<RecordingController>().videoUploadFirstTime();\n      }\n    });*/\n    return Scaffold(\n      body: Obx(\n        () => controller.pages[controller.selectedIndex.value],\n      ),\n      // floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,\n      // floatingActionButton: FloatingActionButton(\n      //   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(100.r)),\n      //     onPressed: (){\n      //\n      //     },\n      //     child: GestureDetector(\n      //         onTap: (){\n      //           Get.toNamed(kRecordingRoute);\n      //         },\n      //         child: CircleAvatar(backgroundColor: kPrimaryColor,radius: 50.r,)),),\n      bottomNavigationBar: Obx(\n        () => (SessionService().isUserLoggedIn && Get.find<RecordingController>().isRecording.value)\n            ? SizedBox.shrink()\n            : BottomNavigationBar(\n                type: BottomNavigationBarType.fixed,\n                selectedFontSize: 16.sp,\n                unselectedFontSize: 16.sp,\n                showUnselectedLabels: true,\n                fixedColor: kBlackColor,\n                backgroundColor: kBlackColor,\n                currentIndex: controller.selectedIndex.value,\n                onTap: (index) async {\n                  controller.selectedIndex.value = index;\n                  if (index != 1) {\n                    printLogs('========resetRecording');\n                    Get.find<RecordingController>().stopCamera();\n                    Get.find<RecordingController>().resetRecording();\n                  }\n                  /*if (index != 0) {\n              HomeScreenController homeScreenController =\n                  Get.isRegistered<HomeScreenController>() ? Get.find<HomeScreenController>() : Get.put(HomeScreenController());\n              Get.find<HomeScreenController>().isVideoChanged.value = false;\n              Get.find<VideoPlayerControllerX>().videoPlayerController?.pause();\n              Get.find<VideoPlayerControllerX>().videoPlayerController?.dispose();\n              Get.find<VideoPlayerControllerX>().videoPlayerController = null;\n              // homeScreenController.videoControllers[homeScreenController.previousValue.bitLength].value.pause();\n              for (int i = 0; i < homeScreenController.videoControllers.length; i++) {\n                if (homeScreenController.videoControllers[i].value.value.isPlaying) {\n                  homeScreenController.videoControllers[i].value.pause();\n                  homeScreenController.isPlaying.value = false;\n                }\n                homeScreenController.videoControllers[i].refresh();\n              }\n              // homeScreenController.videoControllers.map((controller) => controller.value.pause());\n            } else {\n              HomeScreenController homeScreenController =\n                  Get.isRegistered<HomeScreenController>() ? Get.find<HomeScreenController>() : Get.put(HomeScreenController());\n\n              // homeScreenController.videoControllers[homeScreenController.previousValue.bitLength]?.play();\n            }*/\n                  if (index == 1 && Get.find<RecordingController>().isRecording.value) {\n                    Get.find<RecordingController>().stopRecordingForNonDual();\n                    Get.find<RecordingController>().isRecording.value = false;\n                    // Get.find<RecordingController>().checkAndReinitializeCamera();\n\n                    // showModalBottomSheet(\n                    //   context: Get.context!,\n                    //   backgroundColor: kGreyContainerColor,\n                    //   builder: (context) {\n                    //     return SizedBox(\n                    //       // height: 150.h,\n                    //       child: Column(\n                    //         mainAxisSize: MainAxisSize.min,\n                    //         children: [\n                    //           ListTile(\n                    //             title: const Text('Record Video', style: TextStyle(color: Colors.white, fontSize: 16)),\n                    //             leading: Icon(Icons.videocam_rounded, color: kPrimaryColor.withOpacity(0.8)),\n                    //             onTap: () async {\n                    //               Get.back();\n                    //               Get.find<RecordingController>().resetRecording();\n                    //               Get.find<RecordingController>().onInit();\n                    //             },\n                    //           ),\n                    //           ListTile(\n                    //             title: Text(\n                    //               'Select Video',\n                    //               style: AppStyles.labelTextStyle().copyWith(\n                    //                 color: Colors.white,\n                    //                 fontSize: 16,\n                    //               ),\n                    //             ),\n                    //             leading: Icon(\n                    //               Icons.video_collection,\n                    //               color: kPrimaryColor.withOpacity(0.8),\n                    //             ),\n                    //             onTap: () {\n                    //               Get.back();\n                    //               Get.find<RecordingController>().resetRecording();\n                    //               Get.find<RecordingController>().isFileSelected.value = true;\n                    //               Get.find<RecordingController>().onInit();\n                    //               // controller.pickVideo();\n                    //               // Get.back();\n                    //             },\n                    //           ),\n                    //         ],\n                    //       ),\n                    //     );\n                    //   },\n                    // );\n                    /*Get.find<RecordingController>().resetRecording();\n              Get.find<RecordingController>().onInit();*/\n                  } else if (controller.previousSelectedIndex.value == 1 && index == 1 && !Get.find<RecordingController>().isRecording.value) {\n                    if (Get.find<RecordingController>().isFinishedRecording.isTrue) {\n                      Get.find<RecordingController>().resetRecording();\n                    }\n                    printLogs('============inside second if');\n                    // Get.find<RecordingController>().resetRecording();\n                    if (await PermissionsService().hasCameraPermission()) {\n                      Get.find<RecordingController>().initalization();\n                    } else {\n                      await PermissionsService().requestCameraPermission(\n                        onPermissionGranted: () {\n                          printLogs(\"Camera permission granted\");\n                        },\n                        onPermissionDenied: () {\n                          printLogs(\"Camera permission denied\");\n                          CustomSnackbar.showSnackbar(\"Camera permission is required for recording, please enable it from settings\");\n                        },\n                      );\n                    }\n                    // Get.find<RecordingController>().showQualityRulesSheet();\n                  } else if (index == 1) {\n                    // Get.find<RecordingController>().onInit();\n                    Get.find<RecordingController>().resetRecording();\n                    Get.find<RecordingController>().firstInit();\n                  } else if (index == 2) {\n                    // SocialWalletController socialWalletController =\n                    //     Get.isRegistered<SocialWalletController>() ? Get.find<SocialWalletController>() : Get.put(SocialWalletController());\n                    // socialWalletController.getWalletBalance();\n                  } else if (index == 0) {\n                    ProfileScreenController profileScreenController =\n                        Get.isRegistered<ProfileScreenController>() ? Get.find<ProfileScreenController>() : Get.put(ProfileScreenController());\n                    profileScreenController.getData();\n                  }\n                  controller.previousSelectedIndex.value = index;\n                },\n                items: [\n                  /*BottomNavigationBarItem(\n              icon: _buildNavItem(kHomeInactive, kHomeActive, controller.selectedIndex.value == 0),\n              label: ' ',\n            ),\n            BottomNavigationBarItem(\n              icon: _buildNavItem(kSearchInactive, kSearchActive, controller.selectedIndex.value == 1),\n              label: ' ',\n            ),*/\n\n                  BottomNavigationBarItem(\n                    icon: _buildNavItem(kProfileInactive, kUserActive, controller.selectedIndex.value == 0),\n                    label: ' ',\n                  ),\n                  BottomNavigationBarItem(\n                    backgroundColor: Colors.black,\n                    icon: Obx(\n                      () => GestureDetector(\n                          onLongPress: controller.selectedIndex.value == 1 && Get.find<RecordingController>().isRecording.value\n                              ? () async {\n                                  if (Get.find<RecordingController>().isFinishedRecording.isTrue) {\n                                    Get.find<RecordingController>().resetRecording();\n                                  }\n                                  // Get.find<RecordingController>().resetRecording();\n                                  if (await PermissionsService().hasCameraPermission()) {\n                                    Get.find<RecordingController>().initalization();\n                                  } else {\n                                    await PermissionsService().requestCameraPermission(\n                                      onPermissionGranted: () {\n                                        printLogs(\"Camera permission granted\");\n                                      },\n                                      onPermissionDenied: () {\n                                        printLogs(\"Camera permission denied\");\n                                        CustomSnackbar.showSnackbar(\"Camera permission is required for recording, please enable it from settings\");\n                                      },\n                                    );\n                                  }\n                                  // Get.find<RecordingController>().showQualityRulesSheet();\n                                }\n                              : null,\n                          child: controller.selectedIndex.value == 1 && Get.find<RecordingController>().isRecording.value\n                              ? RotatedBox(\n                                  quarterTurns: Get.find<RecordingController>().rotateValue.value.toInt(),\n                                  child: CountDownWidget(controller: Get.find<RecordingController>()))\n                              : Image.asset(\n                                  kRecording,\n                                  width: 65.w,\n                                  height: 65.w,\n                                )),\n                    ),\n                    label: ' ',\n                  ),\n                  BottomNavigationBarItem(\n                    icon: _buildNavItem(kMessageInactive, kMessageActive, controller.selectedIndex.value == 2),\n                    label: ' ',\n                  ),\n                ],\n              ),\n      ),\n    );\n  }\n\n  Widget _buildNavItem(String inactiveIcon, String activeIcon, bool isSelected) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Image.asset(\n          isSelected ? activeIcon : inactiveIcon,\n          width: 24.w,\n          height: 24.h,\n        ),\n        SizedBox(height: 4.h),\n        Container(\n          width: 24.w,\n          height: 4.h,\n          decoration: BoxDecoration(\n            color: isSelected ? kPrimaryColor : Colors.transparent,\n            borderRadius: BorderRadius.circular(2.h),\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
        }
    ]
}