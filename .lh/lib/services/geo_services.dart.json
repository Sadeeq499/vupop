{
    "sourceFile": "lib/services/geo_services.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759141663812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759141670273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import 'package:dio/dio.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:geolocator/geolocator.dart';\n+import 'package:get/get.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:http/http.dart' as http;\n import 'package:socials_app/models/post_models.dart' as p;\n import 'package:socials_app/services/custom_snackbar.dart';\n"
                }
            ],
            "date": 1759141663812,
            "name": "Commit-0",
            "content": "import 'dart:convert';\n\nimport 'package:dio/dio.dart';\nimport 'package:geocoding/geocoding.dart';\nimport 'package:geolocator/geolocator.dart';\nimport 'package:google_maps_flutter/google_maps_flutter.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:socials_app/models/post_models.dart' as p;\nimport 'package:socials_app/services/custom_snackbar.dart';\nimport 'package:socials_app/utils/app_strings.dart';\n\nimport '../utils/common_code.dart';\n\nclass GeoServices {\n  static Future<Position> determinePosition() async {\n    bool serviceEnabled;\n    LocationPermission permission;\n    serviceEnabled = await Geolocator.isLocationServiceEnabled();\n    if (!serviceEnabled) {\n      // CustomSnackbar.showSnackbar('Location services are disabled.');\n      permission = await Geolocator.requestPermission();\n      return Future.error('Location services are disabled.');\n    }\n\n    permission = await Geolocator.checkPermission();\n    if (permission == LocationPermission.denied) {\n      permission = await Geolocator.requestPermission();\n      if (permission == LocationPermission.denied) {\n        CustomSnackbar.showSnackbar('Location permissions are denied');\n        return Future.error('Location permissions are denied');\n      }\n    }\n\n    if (permission == LocationPermission.deniedForever) {\n      return Future.error(\n          'Location permissions are permanently denied, we cannot request permissions.');\n    }\n    return await Geolocator.getCurrentPosition(\n        desiredAccuracy: LocationAccuracy.high);\n  }\n\n  static Future<Placemark> getPlacemark() async {\n    Position position = await determinePosition();\n    List<Placemark> placemarks =\n        await placemarkFromCoordinates(position.latitude, position.longitude);\n    return placemarks[0];\n  }\n\n  static Future<String> getAddress(double lat, double long) async {\n    List<Placemark> placemarks = await placemarkFromCoordinates(lat, long);\n    final address =\n        \"${placemarks[0].street}, ${placemarks[0].subLocality}, ${placemarks[0].locality}, ${placemarks[0].country}\";\n    return address;\n  }\n\n  static Future<String> getCountryCode(double lat, double long) async {\n    List<Placemark> placemarks = await placemarkFromCoordinates(lat, long);\n    return placemarks[0].isoCountryCode!;\n  }\n\n  static Future<String> getCity(double lat, double long) async {\n    List<Placemark> placemarks = await placemarkFromCoordinates(lat, long);\n    return placemarks[0].locality!;\n  }\n\n  static calculateDistance(double lat, double lng, p.Location aLocation) {\n    return Geolocator.distanceBetween(lat, lng,\n        aLocation.coordinates?[0] ?? 0.0, aLocation.coordinates?[1] ?? 0.0);\n  }\n\n  static double calculateNearDistance({\n    required double lat,\n    required double long,\n    required p.Location aLocation,\n    int radius = 10,\n  }) {\n    final double distanceInMeters = Geolocator.distanceBetween(\n      lat,\n      long,\n      aLocation.coordinates?[0] ?? 0.0,\n      aLocation.coordinates?[1] ?? 0.0,\n    );\n\n    if (distanceInMeters > radius) {\n      return 0;\n    } else {\n      return distanceInMeters;\n    }\n  }\n\n  static Future<String> placeApi(double lat, double long) async {\n    List<Placemark> placemarks = await placemarkFromCoordinates(lat, long);\n    return placemarks[0].locality!;\n  }\n\n  static Future<List<String>> fetchSuggestions(String input) async {\n    List<String> suggestions = [];\n    try {\n      if (input.isEmpty) return [];\n\n      final String request =\n          'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=$input&key=$kGOOGLEMAPSAPIKEY';\n\n      final response = await Dio().get(request);\n      printLogs('${response.statusCode} response: ${response.data}');\n      if (response.statusCode == 200) {\n        final json = response.data;\n        printLogs('json: $json');\n        for (var element in json['predictions']) {\n          suggestions.add(element['description']);\n        }\n        return suggestions;\n      }\n    } catch (e) {\n      printLogs('fetchSuggestions Exception : $e');\n    }\n    return suggestions;\n  }\n\n  static Future<LatLng> getLatLngFromPlace(String place) async {\n    final String request =\n        'https://maps.googleapis.com/maps/api/geocode/json?address=$place&key=$kGOOGLEMAPSAPIKEY';\n    final response = await http.get(Uri.parse(request));\n    if (response.statusCode == 200) {\n      final json = jsonDecode(response.body);\n      final location = json['results'][0]['geometry']['location'];\n\n      return LatLng(location['lat'], location['lng']);\n    } else {\n      throw Exception('Failed to fetch location');\n    }\n  }\n}\n"
        }
    ]
}